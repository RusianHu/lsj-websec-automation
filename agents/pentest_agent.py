"""
渗透测试 Agent 模块
"""
from typing import Optional, List, Callable
from agents.base_agent import BaseSecurityAgent, create_model_client
from utils.logger import log


class WebScannerAgent(BaseSecurityAgent):
    """Web 扫描 Agent"""
    
    def __init__(self, tools: Optional[List[Callable]] = None):
        system_message = """你是一个专业的 Web 安全扫描专家。

你的职责：
1. 分析目标网站的结构和技术栈
2. 识别潜在的安全漏洞
3. 执行目录扫描、文件发现等任务
4. 使用提供的工具进行自动化测试
5. 生成详细的扫描报告

工作原则：
- 始终遵守法律法规，仅在授权范围内进行测试
- 详细记录每一步操作和发现
- 对发现的漏洞进行分类和风险评估
- 提供修复建议

请使用提供的工具来完成扫描任务。"""
        
        super().__init__(
            name="WebScanner",
            system_message=system_message,
            tools=tools
        )


class VulnerabilityAnalystAgent(BaseSecurityAgent):
    """漏洞分析 Agent"""
    
    def __init__(self, tools: Optional[List[Callable]] = None):
        system_message = """你是一个专业的 Web 安全漏洞分析专家。

你的职责：
1. 分析扫描结果，识别真实漏洞
2. 对漏洞进行深入分析和验证
3. 评估漏洞的严重程度和影响范围
4. 提供详细的漏洞利用场景
5. 给出专业的修复建议

分析维度：
- 漏洞类型（SQL注入、XSS、CSRF等）
- 严重程度（高、中、低）
- 影响范围
- 利用难度
- 修复优先级

请基于扫描结果进行专业分析。"""
        
        super().__init__(
            name="VulnerabilityAnalyst",
            system_message=system_message,
            tools=tools
        )


class ReportGeneratorAgent(BaseSecurityAgent):
    """报告生成 Agent"""
    
    def __init__(self, tools: Optional[List[Callable]] = None):
        system_message = """你是一个专业的安全测试报告生成专家。

你的职责：
1. 整理和汇总测试结果
2. 生成结构化的安全测试报告
3. 提供清晰的漏洞描述和证据
4. 给出可执行的修复建议
5. 生成管理层和技术层两个版本的报告

报告内容：
- 执行摘要
- 测试范围和方法
- 发现的漏洞列表
- 详细的漏洞描述
- 风险评估
- 修复建议
- 附录（截图、日志等）

请生成专业、清晰、可执行的安全测试报告。"""
        
        super().__init__(
            name="ReportGenerator",
            system_message=system_message,
            tools=tools
        )


class BrowserAutomationAgent(BaseSecurityAgent):
    """浏览器自动化 Agent"""
    
    def __init__(self, tools: Optional[List[Callable]] = None):
        system_message = """你是一个专业的浏览器自动化测试专家。

你的职责：
1. 使用 Playwright 进行浏览器自动化操作
2. 模拟用户行为进行安全测试
3. 测试认证和授权机制
4. 检测客户端安全问题
5. 捕获和分析网络请求

测试场景：
- 登录流程测试
- 表单提交测试
- 文件上传测试
- XSS 漏洞测试
- CSRF 漏洞测试
- 会话管理测试

请使用提供的浏览器工具进行自动化测试。"""
        
        super().__init__(
            name="BrowserAutomation",
            system_message=system_message,
            tools=tools
        )

