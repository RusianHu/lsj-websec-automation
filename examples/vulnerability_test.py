"""
漏洞测试示例
演示如何使用工具进行漏洞测试
"""
import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from tools.vulnerability_scanner import (
    test_sql_injection,
    test_xss,
    test_lfi,
    test_open_redirect
)
from utils.logger import log


async def vulnerability_test_example():
    """漏洞测试示例"""
    
    # 目标 URL（使用公开的测试网站）
    target_url = "http://testphp.vulnweb.com/artists.php"
    
    # 测试参数
    params = {"artist": "1"}
    
    log.info(f"开始漏洞测试: {target_url}")
    
    # 1. SQL 注入测试
    print("\n" + "="*60)
    print("1. SQL 注入测试")
    print("="*60)
    sql_result = await test_sql_injection(target_url, params)
    print(f"发现 {sql_result['count']} 个可能的 SQL 注入点")
    for vuln in sql_result.get('vulnerabilities', []):
        print(f"  - 参数: {vuln['parameter']}, Payload: {vuln['payload']}")
    
    # 2. XSS 测试
    print("\n" + "="*60)
    print("2. XSS 跨站脚本测试")
    print("="*60)
    xss_result = await test_xss(target_url, params)
    print(f"发现 {xss_result['count']} 个可能的 XSS 漏洞")
    for vuln in xss_result.get('vulnerabilities', []):
        print(f"  - 参数: {vuln['parameter']}, Payload: {vuln['payload']}")
    
    # 3. LFI 测试
    print("\n" + "="*60)
    print("3. 本地文件包含测试")
    print("="*60)
    lfi_result = await test_lfi(target_url, params)
    print(f"发现 {lfi_result['count']} 个可能的 LFI 漏洞")
    for vuln in lfi_result.get('vulnerabilities', []):
        print(f"  - 参数: {vuln['parameter']}, Payload: {vuln['payload']}")
    
    # 4. 开放重定向测试
    print("\n" + "="*60)
    print("4. 开放重定向测试")
    print("="*60)
    redirect_result = await test_open_redirect(target_url, params)
    print(f"发现 {redirect_result['count']} 个可能的开放重定向漏洞")
    for vuln in redirect_result.get('vulnerabilities', []):
        print(f"  - 参数: {vuln['parameter']}, 重定向到: {vuln['redirect_to']}")
    
    print("\n" + "="*60)
    print("漏洞测试完成")
    print("="*60)


if __name__ == "__main__":
    asyncio.run(vulnerability_test_example())

