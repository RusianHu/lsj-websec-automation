"""
高级渗透测试策略演示
展示如何使用新增的高级扫描功能
"""
import asyncio
import sys
from pathlib import Path

# 添加项目根目录到路径
sys.path.insert(0, str(Path(__file__).parent.parent))

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich import box

from tools.advanced_scanner import (
    fuzzing_directory_advanced,
    fuzzing_parameters,
    fuzzing_headers
)
from tools.api_security_scanner import (
    discover_api_endpoints,
    test_api_authentication,
    test_api_rate_limiting,
    test_api_methods,
    test_graphql_introspection
)
from tools.auth_scanner import (
    test_authentication_bypass,
    test_idor_vulnerability,
    test_session_management,
    test_privilege_escalation
)
from utils.logger import log

console = Console()


async def demo_advanced_directory_fuzzing():
    """演示高级目录模糊测试"""
    console.print("\n[bold cyan]>>> 高级目录模糊测试演示[/bold cyan]")
    
    # 简单的字典
    wordlist = ["admin", "api", "backup", "config", "test", "upload"]
    
    result = await fuzzing_directory_advanced(
        base_url="https://yanshanlaosiji.top",
        wordlist=wordlist,
        extensions=[".php", ".html", ".txt"],
        auto_calibrate=True,  # 启用自动校准
        rate_limit=10,  # 每秒 10 个请求
        timeout=10
    )
    
    # 显示结果
    table = Table(title="目录模糊测试结果", box=box.ROUNDED)
    table.add_column("路径", style="cyan")
    table.add_column("状态码", style="green")
    table.add_column("大小", style="yellow")
    table.add_column("有趣", style="magenta")
    
    for item in result.get("results", [])[:10]:  # 只显示前 10 个
        table.add_row(
            item["path"],
            str(item["status_code"]),
            str(item["content_length"]),
            "✓" if item.get("interesting") else ""
        )
    
    console.print(table)
    console.print(f"\n[green]总共发现 {result['found']} 个有效路径[/green]")


async def demo_parameter_fuzzing():
    """演示参数模糊测试"""
    console.print("\n[bold cyan]>>> 参数模糊测试演示[/bold cyan]")
    
    param_wordlist = ["id", "user", "page", "file", "debug", "admin"]
    value_wordlist = ["1", "test", "true", "admin"]
    
    result = await fuzzing_parameters(
        url="https://yanshanlaosiji.top",
        param_wordlist=param_wordlist,
        value_wordlist=value_wordlist,
        method="GET",
        mode="sniper",
        auto_calibrate=True
    )
    
    # 显示结果
    table = Table(title="参数模糊测试结果", box=box.ROUNDED)
    table.add_column("参数", style="cyan")
    table.add_column("值", style="green")
    table.add_column("状态码", style="yellow")
    
    for item in result.get("results", [])[:10]:
        table.add_row(
            item["parameter"],
            item["value"],
            str(item["status_code"])
        )
    
    console.print(table)
    console.print(f"\n[green]发现 {result['found']} 个有效参数[/green]")


async def demo_api_discovery():
    """演示 API 端点发现"""
    console.print("\n[bold cyan]>>> API 端点发现演示[/bold cyan]")
    
    result = await discover_api_endpoints(
        base_url="https://yanshanlaosiji.top",
        versions=["api/v1", "api/v2", "v1"],
        auto_calibrate=True
    )
    
    # 显示结果
    table = Table(title="API 端点发现结果", box=box.ROUNDED)
    table.add_column("端点", style="cyan")
    table.add_column("版本", style="green")
    table.add_column("类型", style="yellow")
    table.add_column("方法", style="magenta")
    
    for item in result.get("results", [])[:10]:
        table.add_row(
            item["endpoint"],
            item["version"] or "无",
            item["api_type"],
            ", ".join(item.get("methods", []))
        )
    
    console.print(table)
    console.print(f"\n[green]发现 {result['found']} 个 API 端点[/green]")


async def demo_authentication_bypass():
    """演示认证绕过测试"""
    console.print("\n[bold cyan]>>> 认证绕过测试演示[/bold cyan]")
    
    result = await test_authentication_bypass(
        login_url="https://yanshanlaosiji.top/login",
        protected_url="https://yanshanlaosiji.top/admin"
    )
    
    # 显示结果
    table = Table(title="认证绕过测试结果", box=box.ROUNDED)
    table.add_column("技术", style="cyan")
    table.add_column("描述", style="green")
    table.add_column("状态", style="yellow")
    table.add_column("严重程度", style="red")
    
    for item in result.get("results", []):
        status = "✓ 成功" if item["bypassed"] else "✗ 失败"
        table.add_row(
            item["technique"],
            item["description"][:50] + "...",
            status,
            item["severity"]
        )
    
    console.print(table)
    
    if result.get("vulnerable"):
        console.print(f"\n[red]警告: 发现 {result['bypassed_count']} 个认证绕过漏洞！[/red]")
    else:
        console.print(f"\n[green]未发现认证绕过漏洞[/green]")


async def demo_idor_testing():
    """演示 IDOR 测试"""
    console.print("\n[bold cyan]>>> IDOR 漏洞测试演示[/bold cyan]")
    
    result = await test_idor_vulnerability(
        base_url="https://yanshanlaosiji.top/api/users/",
        id_parameter="path",
        id_range=range(1, 20),  # 测试 ID 1-19
        timeout=10
    )
    
    console.print(f"\n测试范围: {result['tested_range']}")
    console.print(f"可访问的 ID 数量: {result['accessible_count']}")
    
    if result.get("vulnerable"):
        console.print(f"\n[red]警告: 可能存在 IDOR 漏洞！[/red]")
        console.print(f"可访问的 ID: {result['accessible_ids']}")
    else:
        console.print(f"\n[green]未发现 IDOR 漏洞[/green]")


async def demo_api_rate_limiting():
    """演示 API 速率限制测试"""
    console.print("\n[bold cyan]>>> API 速率限制测试演示[/bold cyan]")
    
    result = await test_api_rate_limiting(
        api_url="https://yanshanlaosiji.top/api/status",
        requests_count=50  # 发送 50 个请求
    )
    
    console.print(f"\n总请求数: {result['total_requests']}")
    console.print(f"是否被限速: {'是' if result['rate_limited'] else '否'}")
    
    if result.get("vulnerable"):
        console.print(f"\n[yellow]警告: API 未实施速率限制，可能被滥用[/yellow]")
    else:
        console.print(f"\n[green]API 已实施速率限制[/green]")


async def main():
    """主函数"""
    console.print(Panel.fit(
        "[bold cyan]LSJ WebSec Automation - 高级渗透测试策略演示[/bold cyan]\n"
        "展示基于 ffuf 工具的专业渗透测试功能",
        border_style="cyan"
    ))
    
    # 选择要运行的演示
    demos = {
        "1": ("高级目录模糊测试", demo_advanced_directory_fuzzing),
        "2": ("参数模糊测试", demo_parameter_fuzzing),
        "3": ("API 端点发现", demo_api_discovery),
        "4": ("认证绕过测试", demo_authentication_bypass),
        "5": ("IDOR 漏洞测试", demo_idor_testing),
        "6": ("API 速率限制测试", demo_api_rate_limiting),
    }
    
    console.print("\n[bold]可用的演示：[/bold]")
    for key, (name, _) in demos.items():
        console.print(f"  {key}. {name}")
    console.print("  0. 运行所有演示")
    
    choice = input("\n请选择要运行的演示 (0-6): ").strip()
    
    try:
        if choice == "0":
            # 运行所有演示
            for name, demo_func in demos.values():
                try:
                    await demo_func()
                except Exception as e:
                    console.print(f"\n[red]演示 '{name}' 失败: {str(e)}[/red]")
                    log.error(f"演示失败: {str(e)}")
        elif choice in demos:
            name, demo_func = demos[choice]
            await demo_func()
        else:
            console.print("[red]无效的选择[/red]")
    
    except KeyboardInterrupt:
        console.print("\n\n[yellow]演示已取消[/yellow]")
    except Exception as e:
        console.print(f"\n[red]错误: {str(e)}[/red]")
        log.error(f"演示失败: {str(e)}")
    
    console.print("\n[bold green]演示完成！[/bold green]")


if __name__ == "__main__":
    asyncio.run(main())

